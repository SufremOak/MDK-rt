// Grammar for Powr programming language
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
program = { main_declaration ~ statement* }

main_declaration = { "func" ~ identifier ~ "{" ~ (!"}" ~ ANY)* ~ "}" }
statement = { print_statement | function_definition | file_check | variable_declaration | if_statement | else_statement | try_statement }

print_statement = { "println" ~ "{" ~ (!"}" ~ ANY)* ~ "}" }
function_definition = { "Return::Function" ~ "~>" ~ identifier }
file_check = { "fs.checkFor" ~ "(" ~ identifier ~ ")" ~ "." ~ "waitFor" ~ "(" ~ identifier ~ ")" }
variable_declaration = { "let" ~ identifier ~ ":" ~ type ~ "=" ~ expression ~ ";" }

expression = { identifier | string_literal | function_call }
function_call = { identifier ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "${" ~ expression ~ "}" ~ "\"" }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

if_statement = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ statement* ~ "}" }
else_statement = { "else" ~ "{" ~ statement* ~ "}" }

func_declaration = { "func" ~ identifier ~ "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" ~ "{" ~ statement* ~ "}" }

try_statement = { "try" ~ "{" ~ statement* ~ "}" ~ "catch" ~ identifier ~ "{" ~ statement* ~ "}" }

import_statement = { "import" ~ identifier }

array_declaration = { "let" ~ identifier ~ "=" ~ "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }

single_line_comment = _{ "//" ~ (!"\n" ~ ANY)* }
multi_line_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

async_function = { "async" ~ "func" ~ identifier ~ "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" ~ "{" ~ statement* ~ "}" }

type = { "int" | "float" | "string" | "bool" | identifier }
